#include <TimerOne.h>
#include <ClickEncoder.h>
#include <LiquidCrystal.h>

LiquidCrystal lcd(7,6,5,4,3,2);


byte a[8]={
  B11111,
  B11111,
  B11111,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000
};

byte b[8]={
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B11111,
  B11111,
  B11111
};

byte c[8]={
  B11111,
  B11111,
  B00000,
  B00000,
  B00000,
  B00000,
  B11111,
  B11111
};

byte d[8] ={
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111
};

byte e[8]={
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,

};

byte f[8]={
  B00000,
  B00000,
  B00000,
  B00000,
  B01110,
  B11111,
  B11111,
  B01110
};


ClickEncoder *encoder;
int value = 0;
int last = -1;
int mode = 1;

int C = 0;
int B = 0;

void timerIsr(){
  encoder->service();
}

void setup(){
  lcd.createChar(1,a);
  lcd.createChar(2,b);
  lcd.createChar(3,c);
  lcd.createChar(4,d);
  lcd.createChar(5,e);
  lcd.createChar(6,f);

  lcd.begin(16,2);

  Serial.begin(9600);

  encoder = new ClickEncoder(A1,A0,A2,4);
  Timer1.initialize(1000);
  Timer1.attachInterrupt(timerIsr);

}



void loop(){

  ClickEncoder::Button b = encoder->getButton();
  if(b == ClickEncoder::Held && mode != 1){
    mode = 1;
    lcd.clear();
  }
  
  if(b == ClickEncoder::Clicked){
    mode = mode++;
    if(mode > 8){
      mode = 3;
    }
    lcd.clear();
  }
  
  //Serial.print(menu);
  switch(mode){
  case 1:
    getTemp();
    break;
  case 2:
    getPress();
    break;
  case 3:
    ground_idle();
    break;
  case 4:
    flight_idle_2();
    break;
  case 5:
    flight_idle_1();
    break;
  case 6:
    mpa();
    break;
  case 7:
    pmc();
    break;
   case 8:
     trt();
     break;
  }
}



void getTemp(){
  static int tempSet = 20;
  static int oldTemp = 0;
  static boolean CF;
  static byte chg;
  static boolean btn_chg;
  
  lcd.home();
  lcd.print("Temperature");
  ClickEncoder::Button b = encoder->getButton();

  if(b == ClickEncoder::Held && btn_chg == 0){
    CF = !CF;
    btn_chg = 1;
    if(CF == 1){
      tempSet = (tempSet*9/5)+32;
      }
    if(CF == 0){
      tempSet = (tempSet-32)*5/9;
      }
  }
  if(b == ClickEncoder::Released && btn_chg == 1){btn_chg = 0;}

  if(CF == 0){
    lcd.print(" <C>");
    lcd.setCursor(7,1);
    lcd.print(tempSet);
    tempSet += encoder->getValue();
    tempSet = constrain(tempSet, -50, 65);
    if(tempSet != oldTemp){
      lcd.setCursor(7,1);
      lcd.print("     ");
      lcd.setCursor(7,1);
      lcd.print(tempSet);
      oldTemp = tempSet;
    }  
    C = tempSet;
  }

  if(CF == 1){
    lcd.print(" <F>");
    lcd.setCursor(7,1);
    lcd.print(tempSet);
    tempSet += encoder->getValue();
    tempSet = constrain(tempSet, -50, 150);
    if(tempSet != oldTemp){
      lcd.setCursor(7,1);
      lcd.print("     ");
      lcd.setCursor(7,1);
      lcd.print(tempSet);
      oldTemp = tempSet;
    }
    C = (tempSet-32)*5/9;
  }
}

void getPress(){
  static float pressSet = 2992;
  static float oldPress = 0;
  lcd.home();
  lcd.print("Baro Press:");
  lcd.setCursor(0,1);
  
  lcd.print(pressSet/100);
  pressSet += encoder->getValue();
  if(pressSet != oldPress){
    lcd.setCursor(0,1);
    lcd.print("     ");
    lcd.setCursor(0,1);
    
    lcd.print(pressSet/100);
    oldPress = pressSet;
  }
  B=pressSet;
}



void ground_idle(){

float low = 54+(C/10);
float high = 56+((C+8)/10);  
if(C < 0){
  low = 54.0;
}
if(C < -8){
   high = 56.0;
}
  lcd.home();
  lcd.print(" GROUND IDLE N2");
  lcd.setCursor(2,1);
  lcd.print(low,1);
  lcd.print(" - ");
  lcd.print(high,1);
 }


void flight_idle_2(){
  lcd.home();
  float low = 74.5+0.13*C;
  float high = 76.8+0.13*C;
  lcd.print(" FLIGHT IDLE N2");
  lcd.setCursor(2,1);
  lcd.print(low,1);
  lcd.print(" - ");
  lcd.print(high,1);
}
  
void flight_idle_1(){
  lcd.home();
 float low = 32+0.048*C;
  float high = 39.2+0.06*C;
  lcd.print(" FLIGHT IDLE N1");
  lcd.setCursor(2,1);
  lcd.print(low,1);
  lcd.print(" - ");
  lcd.print(high,1); 
}

void mpa(){
  lcd.home();
  float mpa = 79.9+0.144*C;
  mpa = mpa * 10;
  mpa = int(mpa);
  lcd.print("MPA");
  print_big(mpa);
}

void pmc(){
  lcd.home();
  float pmc = 79.9+0.14*C;
  pmc = pmc * 10;
  pmc = int(pmc);
  lcd.print("PMC");
  print_big(pmc);
}

void trt(){
  float trt = 83.75+0.1625*C;
  float baro = 3200 - B;
  baro = baro/100;
  if(baro <= 2.0){
    trt = trt + baro;
  }
  if(baro > 2.0){
    trt = (0.5*(baro-2)+2) + trt;
  }
  float limit = 96.2-0.17*C;
  trt = min(trt,limit);
  trt = trt * 10;
  trt = int(trt);
  lcd.home();
  lcd.print("TRT");
  print_big(trt);
}

void print_big(int x){ //number to print (from 1-999), and to put decimal or not


  int first = (x/100)%10;     //Get the hundreds digit
  int second = (x/10)%10;     //Get the tens
  int third = (x%10);         //Get the ones

    bigNum(first,1); 
  
    bigNum(second,2); 

    bigNum(third,3);
 
    lcd.setCursor(11,1);
    lcd.write(6);
  }



void bigNum(int x, int p){

  int top[]={
    0,
    1,4,5,  // 1
    1,3,4,  // 2
    1,3,4,  // 3
    4,2,4,  // 4
    4,3,1,  // 5
    4,3,1,  // 6
    1,1,4,  // 7
    4,3,4,  // 8
    4,3,4,  // 9
    4,1,4   // 0
  };

  int bottom[]={
    0,
    2,4,2,  // 1
    4,2,2,  // 2
    2,2,4,  // 3
    5,5,4,  // 4
    2,2,4,  // 5
    4,2,4,  // 6
    5,5,4,  // 7
    4,2,4,  // 8
    2,2,4,  // 9
    4,2,4   // 0
  };




  lcd.home();
  lcd.setCursor(p+(p*3),0); //set digit horizontal position, add in a space for every nth digit
  for(int y=0; y < 3; y++){ //grabs the 3 characters needed to form a row for the big digit
    if(x > 9 || x < 1){ 
      lcd.write(top[28+y]); 
    } //write a zero if number to be written != 1-9
    else
      lcd.write(top[y+((x*3)-2)]); //pick the right characters from the array
  }

  //bottom row of digit
  lcd.setCursor(p+(p*3),1); //add in additional room for position
  for(int y=0; y < 3; y++){ //need to grab next sequence in array
    if(x > 9 || x < 1){ 
      lcd.write(bottom[28+y]); 
    } //write a zero if number to be written != 1-9
    else
      lcd.write(bottom[y+((x*3)-2)]);
  }
}



